#include<PVX_json.h>
#include<PVX_Encode.h>
#include<sstream>
#include <stdio.h>
#include <PVX_String.h>
#include <PVX_Encode.h>
#include <PVX_File.h>
#include <string_view>
#include <PVX_Regex.h>

static std::wstring JsonString(const std::wstring& s) {
	std::wstringstream ret;
	ret << '"';
	for (auto c : s) {
		switch (c) {
			case '"': ret << "\\\""; break;
			case '\n': ret << "\\n"; break;
			case '\t': ret << "\\t"; break;
			case '\r': ret << "\\r"; break;
			case '\\': ret << "\\\\"; break;
			case 0:
				goto forceEnd;
			default: ret << c;
		}
	}
forceEnd:
	ret << '"';
	return ret.str();
}
enum class Symbols : wchar_t {
	Terminator = 0,
	Quote,
	Integer,
	Float,
	True,
	False,
	Null,
	OpenCurly,
	OpenSquare,
	CloseSquare,
	CloseCurly,
	Comma,
	Colon,
	Function,
};

namespace PVX {
	namespace JSON {
		void Item::WriteBin(void* f) {
			WriteNumber((FILE*)f, (size_t)Value.GetType());
			switch (Value.GetType()) {
				case JSON::jsElementType::Integer: fwrite(&Integer(), sizeof(long long), 1, (FILE*)f); break;
				case JSON::jsElementType::Float: fwrite(&Double(), sizeof(double), 1, (FILE*)f); break;
				case JSON::jsElementType::String: WriteString((FILE*)f, String()); break;
				case JSON::jsElementType::Array:
				{
					auto& Array = Value.Array();
					WriteNumber((FILE*)f, Array.size());
					for (auto& i : Array)
						i.WriteBin(f);
					break;
				}
				case JSON::jsElementType::Object:
				{
					auto& Object = Value.Object();
					WriteNumber((FILE*)f, Object.size());
					for (auto& [n, v] : Object) {
						if (v.Value.GetType()!= JSON::jsElementType::Undefined && v.Value.GetType()!=JSON::jsElementType::Null)
							WriteString((FILE*)f, n);
						v.WriteBin(f);
					}
					break;
				}

			};
		}
	}
}